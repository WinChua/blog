and_expr ["'('", "'+'", "'-'", "'...'", "'False'", "'None'", "'True'", "'['", "'{'", "'~'", 'AWAIT', 'NAME', 'NUMBER', 'STRING']
and_test ["'('", "'+'", "'-'", "'...'", "'False'", "'None'", "'True'", "'['", "'not'", "'{'", "'~'", 'AWAIT', 'NAME', 'NUMBER', 'STRING']
annassign ["':'"]
arglist ["'('", "'*'", "'**'", "'+'", "'-'", "'...'", "'False'", "'None'", "'True'", "'['", "'lambda'", "'not'", "'{'", "'~'", 'AWAIT', 'NAME', 'NUMBER', 'STRING']
argument ["'('", "'*'", "'**'", "'+'", "'-'", "'...'", "'False'", "'None'", "'True'", "'['", "'lambda'", "'not'", "'{'", "'~'", 'AWAIT', 'NAME', 'NUMBER', 'STRING']
arith_expr ["'('", "'+'", "'-'", "'...'", "'False'", "'None'", "'True'", "'['", "'{'", "'~'", 'AWAIT', 'NAME', 'NUMBER', 'STRING']
assert_stmt ["'assert'"]
async_funcdef ['ASYNC']
async_stmt ['ASYNC']
atom ["'('", "'...'", "'False'", "'None'", "'True'", "'['", "'{'", 'NAME', 'NUMBER', 'STRING']
atom_expr ["'('", "'...'", "'False'", "'None'", "'True'", "'['", "'{'", 'AWAIT', 'NAME', 'NUMBER', 'STRING']
augassign ["'%='", "'&='", "'**='", "'*='", "'+='", "'-='", "'//='", "'/='", "'<<='", "'>>='", "'@='", "'^='", "'|='"]
break_stmt ["'break'"]
classdef ["'class'"]
comp_for ["'for'", 'ASYNC']
comp_if ["'if'"]
comp_iter ["'for'", "'if'", 'ASYNC']
comp_op ["'!='", "'<'", "'<='", "'<>'", "'=='", "'>'", "'>='", "'in'", "'is'", "'not'"]
comparison ["'('", "'+'", "'-'", "'...'", "'False'", "'None'", "'True'", "'['", "'{'", "'~'", 'AWAIT', 'NAME', 'NUMBER', 'STRING']
compound_stmt ["'@'", "'class'", "'def'", "'for'", "'if'", "'try'", "'while'", "'with'", 'ASYNC']
continue_stmt ["'continue'"]
decorated ["'@'"]
decorator ["'@'"]
decorators ["'@'"]
del_stmt ["'del'"]
dictorsetmaker ["'('", "'*'", "'**'", "'+'", "'-'", "'...'", "'False'", "'None'", "'True'", "'['", "'lambda'", "'not'", "'{'", "'~'", 'AWAIT', 'NAME', 'NUMBER', 'STRING']
dotted_as_name ['NAME']
dotted_as_names ['NAME']
dotted_name ['NAME']
encoding_decl ['NAME']
eval_input ["'('", "'+'", "'-'", "'...'", "'False'", "'None'", "'True'", "'['", "'lambda'", "'not'", "'{'", "'~'", 'AWAIT', 'NAME', 'NUMBER', 'STRING']
except_clause ["'except'"]
expr ["'('", "'+'", "'-'", "'...'", "'False'", "'None'", "'True'", "'['", "'{'", "'~'", 'AWAIT', 'NAME', 'NUMBER', 'STRING']
expr_stmt ["'('", "'*'", "'+'", "'-'", "'...'", "'False'", "'None'", "'True'", "'['", "'lambda'", "'not'", "'{'", "'~'", 'AWAIT', 'NAME', 'NUMBER', 'STRING']
exprlist ["'('", "'*'", "'+'", "'-'", "'...'", "'False'", "'None'", "'True'", "'['", "'{'", "'~'", 'AWAIT', 'NAME', 'NUMBER', 'STRING']
factor ["'('", "'+'", "'-'", "'...'", "'False'", "'None'", "'True'", "'['", "'{'", "'~'", 'AWAIT', 'NAME', 'NUMBER', 'STRING']
file_input ["'('", "'*'", "'+'", "'-'", "'...'", "'@'", "'False'", "'None'", "'True'", "'['", "'assert'", "'break'", "'class'", "'continue'", "'def'", "'del'", "'for'", "'from'", "'global'", "'if'", "'import'", "'lambda'", "'nonlocal'", "'not'", "'pass'", "'raise'", "'return'", "'try'", "'while'", "'with'", "'yield'", "'{'", "'~'", 'ASYNC', 'AWAIT', 'ENDMARKER', 'NAME', 'NEWLINE', 'NUMBER', 'STRING']
flow_stmt ["'break'", "'continue'", "'raise'", "'return'", "'yield'"]
for_stmt ["'for'"]
func_body_suite ["'('", "'*'", "'+'", "'-'", "'...'", "'False'", "'None'", "'True'", "'['", "'assert'", "'break'", "'continue'", "'del'", "'from'", "'global'", "'import'", "'lambda'", "'nonlocal'", "'not'", "'pass'", "'raise'", "'return'", "'yield'", "'{'", "'~'", 'AWAIT', 'NAME', 'NEWLINE', 'NUMBER', 'STRING']
func_type ["'('"]
func_type_input ["'('"]
funcdef ["'def'"]
global_stmt ["'global'"]
if_stmt ["'if'"]
import_as_name ['NAME']
import_as_names ['NAME']
import_from ["'from'"]
import_name ["'import'"]
import_stmt ["'from'", "'import'"]
lambdef ["'lambda'"]
lambdef_nocond ["'lambda'"]
namedexpr_test ["'('", "'+'", "'-'", "'...'", "'False'", "'None'", "'True'", "'['", "'lambda'", "'not'", "'{'", "'~'", 'AWAIT', 'NAME', 'NUMBER', 'STRING']
nonlocal_stmt ["'nonlocal'"]
not_test ["'('", "'+'", "'-'", "'...'", "'False'", "'None'", "'True'", "'['", "'not'", "'{'", "'~'", 'AWAIT', 'NAME', 'NUMBER', 'STRING']
or_test ["'('", "'+'", "'-'", "'...'", "'False'", "'None'", "'True'", "'['", "'not'", "'{'", "'~'", 'AWAIT', 'NAME', 'NUMBER', 'STRING']
parameters ["'('"]
pass_stmt ["'pass'"]
power ["'('", "'...'", "'False'", "'None'", "'True'", "'['", "'{'", 'AWAIT', 'NAME', 'NUMBER', 'STRING']
raise_stmt ["'raise'"]
return_stmt ["'return'"]
shift_expr ["'('", "'+'", "'-'", "'...'", "'False'", "'None'", "'True'", "'['", "'{'", "'~'", 'AWAIT', 'NAME', 'NUMBER', 'STRING']
simple_stmt ["'('", "'*'", "'+'", "'-'", "'...'", "'False'", "'None'", "'True'", "'['", "'assert'", "'break'", "'continue'", "'del'", "'from'", "'global'", "'import'", "'lambda'", "'nonlocal'", "'not'", "'pass'", "'raise'", "'return'", "'yield'", "'{'", "'~'", 'AWAIT', 'NAME', 'NUMBER', 'STRING']
single_input ["'('", "'*'", "'+'", "'-'", "'...'", "'@'", "'False'", "'None'", "'True'", "'['", "'assert'", "'break'", "'class'", "'continue'", "'def'", "'del'", "'for'", "'from'", "'global'", "'if'", "'import'", "'lambda'", "'nonlocal'", "'not'", "'pass'", "'raise'", "'return'", "'try'", "'while'", "'with'", "'yield'", "'{'", "'~'", 'ASYNC', 'AWAIT', 'NAME', 'NEWLINE', 'NUMBER', 'STRING']
sliceop ["':'"]
small_stmt ["'('", "'*'", "'+'", "'-'", "'...'", "'False'", "'None'", "'True'", "'['", "'assert'", "'break'", "'continue'", "'del'", "'from'", "'global'", "'import'", "'lambda'", "'nonlocal'", "'not'", "'pass'", "'raise'", "'return'", "'yield'", "'{'", "'~'", 'AWAIT', 'NAME', 'NUMBER', 'STRING']
star_expr ["'*'"]
stmt ["'('", "'*'", "'+'", "'-'", "'...'", "'@'", "'False'", "'None'", "'True'", "'['", "'assert'", "'break'", "'class'", "'continue'", "'def'", "'del'", "'for'", "'from'", "'global'", "'if'", "'import'", "'lambda'", "'nonlocal'", "'not'", "'pass'", "'raise'", "'return'", "'try'", "'while'", "'with'", "'yield'", "'{'", "'~'", 'ASYNC', 'AWAIT', 'NAME', 'NUMBER', 'STRING']
subscript ["'('", "'+'", "'-'", "'...'", "':'", "'False'", "'None'", "'True'", "'['", "'lambda'", "'not'", "'{'", "'~'", 'AWAIT', 'NAME', 'NUMBER', 'STRING']
subscriptlist ["'('", "'+'", "'-'", "'...'", "':'", "'False'", "'None'", "'True'", "'['", "'lambda'", "'not'", "'{'", "'~'", 'AWAIT', 'NAME', 'NUMBER', 'STRING']
suite ["'('", "'*'", "'+'", "'-'", "'...'", "'False'", "'None'", "'True'", "'['", "'assert'", "'break'", "'continue'", "'del'", "'from'", "'global'", "'import'", "'lambda'", "'nonlocal'", "'not'", "'pass'", "'raise'", "'return'", "'yield'", "'{'", "'~'", 'AWAIT', 'NAME', 'NEWLINE', 'NUMBER', 'STRING']
sync_comp_for ["'for'"]
term ["'('", "'+'", "'-'", "'...'", "'False'", "'None'", "'True'", "'['", "'{'", "'~'", 'AWAIT', 'NAME', 'NUMBER', 'STRING']
test ["'('", "'+'", "'-'", "'...'", "'False'", "'None'", "'True'", "'['", "'lambda'", "'not'", "'{'", "'~'", 'AWAIT', 'NAME', 'NUMBER', 'STRING']
test_nocond ["'('", "'+'", "'-'", "'...'", "'False'", "'None'", "'True'", "'['", "'lambda'", "'not'", "'{'", "'~'", 'AWAIT', 'NAME', 'NUMBER', 'STRING']
testlist ["'('", "'+'", "'-'", "'...'", "'False'", "'None'", "'True'", "'['", "'lambda'", "'not'", "'{'", "'~'", 'AWAIT', 'NAME', 'NUMBER', 'STRING']
testlist_comp ["'('", "'*'", "'+'", "'-'", "'...'", "'False'", "'None'", "'True'", "'['", "'lambda'", "'not'", "'{'", "'~'", 'AWAIT', 'NAME', 'NUMBER', 'STRING']
testlist_star_expr ["'('", "'*'", "'+'", "'-'", "'...'", "'False'", "'None'", "'True'", "'['", "'lambda'", "'not'", "'{'", "'~'", 'AWAIT', 'NAME', 'NUMBER', 'STRING']
tfpdef ['NAME']
trailer ["'('", "'.'", "'['"]
try_stmt ["'try'"]
typedargslist ["'*'", "'**'", 'NAME']
typelist ["'('", "'*'", "'**'", "'+'", "'-'", "'...'", "'False'", "'None'", "'True'", "'['", "'lambda'", "'not'", "'{'", "'~'", 'AWAIT', 'NAME', 'NUMBER', 'STRING']
varargslist ["'*'", "'**'", 'NAME']
vfpdef ['NAME']
while_stmt ["'while'"]
with_item ["'('", "'+'", "'-'", "'...'", "'False'", "'None'", "'True'", "'['", "'lambda'", "'not'", "'{'", "'~'", 'AWAIT', 'NAME', 'NUMBER', 'STRING']
with_stmt ["'with'"]
xor_expr ["'('", "'+'", "'-'", "'...'", "'False'", "'None'", "'True'", "'['", "'{'", "'~'", 'AWAIT', 'NAME', 'NUMBER', 'STRING']
yield_arg ["'('", "'*'", "'+'", "'-'", "'...'", "'False'", "'None'", "'True'", "'['", "'from'", "'lambda'", "'not'", "'{'", "'~'", 'AWAIT', 'NAME', 'NUMBER', 'STRING']
yield_expr ["'yield'"]
yield_stmt ["'yield'"]
